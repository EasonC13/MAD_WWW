{
    "islasilvernft": "// Decompiled by SuiGPT\nmodule 0x36e9fce4fda30ac1efc64281bed5983e015d1aad4b527fca63787f03f67305bc::islasilvernft {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use std::string;\n    use sui::url;\n    use sui::tx_context;\n    use sui::transfer;\n    use sui::event;\n\n    // ----- Structs -----\n\n    struct AccessControl has key {\n        id: object::UID,\n        owner: address,\n    }\n\n    struct AssetCap has key {\n        id: object::UID,\n        supply: u64,\n        total_supply: u64,\n    }\n\n    struct IslaSilverNFT has store, key {\n        id: object::UID,\n        name: string::String,\n        description: string::String,\n        url: url::Url,\n    }\n\n    struct NFTMinted has copy, drop {\n        object_id: object::ID,\n        creator: address,\n        name: string::String,\n    }\n\n    // ----- Functions -----\n\n    fun init(ctx: &mut tx_context::TxContext) {\n        let asset_cap = AssetCap {\n            id: object::new(ctx),\n            supply: 0,\n            total_supply: 0,\n        };\n        let access_control = AccessControl {\n            id: object::new(ctx),\n            owner: tx_context::sender(ctx),\n        };\n        transfer::share_object(asset_cap);\n        transfer::share_object(access_control);\n    }\n\n    public entry fun mintNFT(\n        asset_cap: &mut AssetCap,\n        name_bytes: vector<u8>,\n        description_bytes: vector<u8>,\n        url_bytes: vector<u8>,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(asset_cap.supply + 1 <= asset_cap.total_supply, 1);\n        asset_cap.supply = asset_cap.supply + 1;\n        let creator = tx_context::sender(ctx);\n        let nft = IslaSilverNFT {\n            id: object::new(ctx),\n            name: string::utf8(name_bytes),\n            description: string::utf8(description_bytes),\n            url: url::new_unsafe_from_bytes(url_bytes),\n        };\n        let nft_id = object::id(&nft);\n        event::emit<NFTMinted>(NFTMinted {\n            object_id: nft_id,\n            creator,\n            name: nft.name,\n        });\n        transfer::public_transfer(nft, creator);\n    }\n\n    public entry fun set_max_amount(\n        access: &AccessControl,\n        asset_cap: &mut AssetCap,\n        max_amount: u64,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(access.owner == tx_context::sender(ctx), 1);\n        asset_cap.total_supply = max_amount;\n    }\n\n    public fun name(nft: &IslaSilverNFT): &string::String {\n        &nft.name\n    }\n\n    public fun description(nft: &IslaSilverNFT): &string::String {\n        &nft.description\n    }\n\n    public fun url(nft: &IslaSilverNFT): &url::Url {\n        &nft.url\n    }\n\n    public fun total_supply(asset_cap: &AssetCap): u64 {\n        asset_cap.total_supply\n    }\n\n    public fun supply(cap: &AssetCap): u64 {\n        cap.supply\n    }\n}"
}