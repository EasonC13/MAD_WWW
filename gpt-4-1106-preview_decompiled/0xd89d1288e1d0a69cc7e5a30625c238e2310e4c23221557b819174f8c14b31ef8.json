{
    "managed": "// Decompiled by SuiGPT\nmodule 0xd89d1288e1d0a69cc7e5a30625c238e2310e4c23221557b819174f8c14b31ef8::managed {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use sui::coin;\n    use sui::tx_context;\n    use std::option;\n    use sui::url;\n    use sui::transfer;\n\n    // ----- Structs -----\n\n    struct MANAGED has drop {\n        dummy_field: bool,\n    }\n\n    struct TreasuryAccess has key {\n        id: object::UID,\n        treasury_cap: coin::TreasuryCap<MANAGED>,\n    }\n\n    // ----- Functions -----\n\n    fun init(managed: MANAGED, ctx: &mut tx_context::TxContext) {\n        let (treasury_cap, coin_metadata) = coin::create_currency<MANAGED>(\n            managed,\n            9,\n            b\"SUISS\",\n            b\"Suisse\",\n            b\"Suisse\",\n            option::some(url::new_unsafe_from_bytes(b\"https://i.ibb.co/fXMzX1t/coin.jpg\")),\n            ctx\n        );\n        transfer::public_freeze_object(coin_metadata);\n        let access = TreasuryAccess {\n            id: object::new(ctx),\n            treasury_cap\n        };\n        transfer::share_object(access);\n    }\n\n    public entry fun mint(\n        treasury_access: &mut TreasuryAccess,\n        amount: u64,\n        recipient: address,\n        ctx: &mut tx_context::TxContext\n    ) {\n        coin::mint_and_transfer<MANAGED>(&mut treasury_access.treasury_cap, amount, recipient, ctx);\n    }\n\n    public fun burn(\n        access: &mut TreasuryAccess,\n        coin: coin::Coin<MANAGED>\n    ) {\n        coin::burn(&mut access.treasury_cap, coin);\n    }\n}"
}