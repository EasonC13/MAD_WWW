{
    "Operation": "// Decompiled by SuiGPT\nmodule 0xe09b37505173ae119a0ae3b1fdf9050a6b029391f9d9f10a3fff27e3f3115727::Operation {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use std::string;\n    use sui::balance;\n    use sui::sui;\n    use sui::tx_context;\n    use std::vector;\n    use sui::package;\n    use sui::display;\n    use sui::transfer;\n    use sui::coin;\n    use sui::event;\n\n    // ----- Structs -----\n\n    struct MintEvent has copy, drop {\n        id: object::ID,\n        fee: u64,\n    }\n\n    struct OPERATION has drop {\n        dummy_field: bool,\n    }\n\n    struct SUIRC20Action has store, key {\n        id: object::UID,\n        inscription: string::String,\n        fee: balance::Balance<sui::SUI>,\n    }\n\n    // ----- Functions -----\n\n    fun init(\n        operation: OPERATION,\n        ctx: &mut tx_context::TxContext\n    ) {\n        let field_names = vector::empty<string::String>();\n        vector::push_back(&mut field_names, string::utf8(b\"inscription\"));\n\n        let field_values = vector::empty<string::String>();\n        vector::push_back(&mut field_values, string::utf8(b\"{inscription}\"));\n\n        let publisher = package::claim(operation, ctx);\n        let display = display::new_with_fields<SUIRC20Action>(publisher, field_names, field_values, ctx);\n\n        display::update_version<SUIRC20Action>(&mut display);\n        transfer::public_transfer(publisher, tx_context::sender(ctx));\n        transfer::public_transfer(display, tx_context::sender(ctx));\n    }\n\n    public entry fun deploy(\n        inscription: string::String,\n        ctx: &mut tx_context::TxContext\n    ) {\n        let action = SUIRC20Action {\n            id: object::new(ctx),\n            inscription,\n            fee: balance::zero<sui::SUI>(),\n        };\n        transfer::freeze_object(action);\n    }\n\n    public entry fun mint(\n        coin: coin::Coin<sui::SUI>,\n        inscription: string::String,\n        ctx: &mut tx_context::TxContext\n    ) {\n        let fee_balance = coin::into_balance(coin);\n        let action = SUIRC20Action {\n            id: object::new(ctx),\n            inscription,\n            fee: fee_balance,\n        };\n        transfer::freeze_object(action);\n        let mint_event = MintEvent {\n            id: object::id(&action),\n            fee: balance::value(&fee_balance),\n        };\n        event::emit(mint_event);\n    }\n\n    public entry fun transfer(\n        inscription: string::String,\n        ctx: &mut tx_context::TxContext\n    ) {\n        let action = SUIRC20Action {\n            id: object::new(ctx),\n            inscription,\n            fee: balance::zero<sui::SUI>(),\n        };\n        transfer::freeze_object(action);\n    }\n}"
}