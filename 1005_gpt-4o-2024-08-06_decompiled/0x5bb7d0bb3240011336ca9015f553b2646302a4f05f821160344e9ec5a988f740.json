{
    "zk_bag": "// Decompiled by SuiGPT\nmodule 0x5bb7d0bb3240011336ca9015f553b2646302a4f05f821160344e9ec5a988f740::zk_bag {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use sui::table;\n    use sui::vec_set;\n    use sui::tx_context;\n    use sui::transfer;\n\n    // ----- Structs -----\n\n    struct BagClaim {\n        bag_id: object::ID,\n    }\n\n    struct BagStore has key {\n        id: object::UID,\n        items: table::Table<address, ZkBag>,\n    }\n\n    struct ZkBag has store, key {\n        id: object::UID,\n        owner: address,\n        item_ids: vec_set::VecSet<address>,\n    }\n\n    // ----- Functions -----\n\n    fun init(ctx: &mut tx_context::TxContext) {\n        let bag_store = BagStore {\n            id: object::new(ctx),\n            items: table::new<address, ZkBag>(ctx),\n        };\n        transfer::share_object(bag_store);\n    }\n\n    fun is_valid_claim_object(\n        zk_bag: &ZkBag,\n        claim: &BagClaim\n    ): bool {\n        claim.bag_id == object::id(zk_bag)\n    }\n\n    public fun new(\n        bag_store: &mut BagStore,\n        owner_address: address,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(\n            !table::contains<address, ZkBag>(&bag_store.items, owner_address),\n            5\n        );\n        let zk_bag = ZkBag {\n            id: object::new(ctx),\n            owner: tx_context::sender(ctx),\n            item_ids: vec_set::empty<address>(),\n        };\n        table::add<address, ZkBag>(&mut bag_store.items, owner_address, zk_bag);\n    }\n\n    public fun add<T: store + key>(\n        bag_store: &mut BagStore,\n        owner: address,\n        item: T,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(table::contains<address, ZkBag>(&bag_store.items, owner), 6);\n        let zk_bag = table::borrow_mut<address, ZkBag>(&mut bag_store.items, owner);\n        assert!(zk_bag.owner == tx_context::sender(ctx), 1);\n        assert!(vec_set::size<address>(&zk_bag.item_ids) < 50, 0);\n        vec_set::insert<address>(&mut zk_bag.item_ids, object::id_address(&item));\n        transfer::public_transfer(item, object::id_address(zk_bag));\n    }\n\n    public fun init_claim(\n        bag_store: &mut BagStore,\n        ctx: &mut tx_context::TxContext\n    ): (ZkBag, BagClaim) {\n        let sender = tx_context::sender(ctx);\n        assert!(table::contains<address, ZkBag>(&bag_store.items, sender), 6);\n        let zk_bag = table::remove<address, ZkBag>(&mut bag_store.items, sender);\n        let bag_claim = BagClaim {\n            bag_id: object::id(&zk_bag)\n        };\n        (zk_bag, bag_claim)\n    }\n\n    public fun reclaim(\n        bag_store: &mut BagStore,\n        owner: address,\n        ctx: &mut tx_context::TxContext\n    ): (ZkBag, BagClaim) {\n        assert!(table::contains<address, ZkBag>(&bag_store.items, owner), 6);\n        let zk_bag = table::remove<address, ZkBag>(&mut bag_store.items, owner);\n        assert!(zk_bag.owner == tx_context::sender(ctx), 1);\n        let bag_claim = BagClaim {\n            bag_id: object::id(&zk_bag)\n        };\n        (zk_bag, bag_claim)\n    }\n\n    public fun update_receiver(\n        bag_store: &mut BagStore,\n        old_receiver: address,\n        new_receiver: address,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(table::contains<address, ZkBag>(&bag_store.items, old_receiver), 6);\n        assert!(!table::contains<address, ZkBag>(&bag_store.items, new_receiver), 5);\n\n        let zk_bag = table::remove<address, ZkBag>(&mut bag_store.items, old_receiver);\n        assert!(zk_bag.owner == tx_context::sender(ctx), 1);\n\n        table::add<address, ZkBag>(&mut bag_store.items, new_receiver, zk_bag);\n    }\n\n    public fun claim<T: store + key>(\n        zk_bag: &mut ZkBag,\n        claim: &BagClaim,\n        receiving: transfer::Receiving<T>\n    ): T {\n        assert!(is_valid_claim_object(zk_bag, claim), 2);\n        let claimed_object = transfer::public_receive<T>(&mut zk_bag.id, receiving);\n        let claimed_object_id = object::id_address(&claimed_object);\n        assert!(vec_set::contains(&zk_bag.item_ids, &claimed_object_id), 7);\n        vec_set::remove(&mut zk_bag.item_ids, &claimed_object_id);\n        claimed_object\n    }\n\n    public fun finalize(\n        zk_bag: ZkBag,\n        bag_claim: BagClaim\n    ) {\n        assert!(is_valid_claim_object(&zk_bag, &bag_claim), 2);\n        assert!(vec_set::is_empty<address>(&zk_bag.item_ids), 3);\n\n        let BagClaim { } = bag_claim;\n\n        let ZkBag {\n            id,\n            owner: _,\n            item_ids: _,\n        } = zk_bag;\n\n        object::delete(id);\n    }\n}"
}