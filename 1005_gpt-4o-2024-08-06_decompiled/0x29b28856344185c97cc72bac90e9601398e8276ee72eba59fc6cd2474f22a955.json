{
    "pool": "// Decompiled by MAD\nmodule 0x29b28856344185c97cc72bac90e9601398e8276ee72eba59fc6cd2474f22a955::pool {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use sui::balance;\n    use sui::tx_context;\n    use std::vector;\n    use sui::coin;\n    use sui::transfer;\n    use sui::event;\n\n    // ----- Structs -----\n\n    struct AccessList has store, key {\n        id: object::UID,\n        list: vector<address>,\n    }\n\n    struct FlashLoanEvent<phantom T0> has copy, drop {\n        loan_amount: u64,\n        repay_amount: u64,\n    }\n\n    struct Pool<phantom T0> has key {\n        id: object::UID,\n        balance: balance::Balance<T0>,\n    }\n\n    // ----- Functions -----\n\n    fun is_valid(\n        access_list: &mut AccessList,\n        ctx: &mut tx_context::TxContext\n    ): bool {\n        let list = access_list.list;\n        let sender = tx_context::sender(ctx);\n        vector::contains(&list, &sender)\n    }\n\n    public fun new_access_list(ctx: &mut tx_context::TxContext) {\n        assert!(\n            tx_context::sender(ctx) == @0xaecdaa08f1b9f4469aa3abe357a0ec105152a9b72129245a2e3277c98e4f3914,\n            10000000000\n        );\n        let access_list = AccessList {\n            id: object::new(ctx),\n            list: vector::singleton<address>(@0xaecdaa08f1b9f4469aa3abe357a0ec105152a9b72129245a2e3277c98e4f3914),\n        };\n        transfer::share_object(access_list);\n    }\n\n    public fun access_list_add(\n        access_list: &mut AccessList,\n        addr: address,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(\n            tx_context::sender(ctx) == @0xaecdaa08f1b9f4469aa3abe357a0ec105152a9b72129245a2e3277c98e4f3914,\n            10000000000\n        );\n        vector::push_back(&mut access_list.list, addr);\n    }\n\n    public fun access_list_add_vec(\n        access_list: &mut AccessList,\n        addresses: vector<address>,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(\n            tx_context::sender(ctx) == @0xaecdaa08f1b9f4469aa3abe357a0ec105152a9b72129245a2e3277c98e4f3914,\n            10000000000\n        );\n        vector::append(&mut access_list.list, addresses);\n    }\n\n    public fun new_pool<T>(\n        coin: coin::Coin<T>,\n        ctx: &mut tx_context::TxContext\n    ) {\n        let pool = Pool<T> {\n            id: object::new(ctx),\n            balance: coin::into_balance(coin),\n        };\n        transfer::share_object(pool);\n    }\n\n    public fun loan<T>(\n        access_list: &mut AccessList,\n        pool: &mut Pool<T>,\n        amount: u64,\n        ctx: &mut tx_context::TxContext\n    ): coin::Coin<T> {\n        assert!(is_valid(access_list, ctx), 10000000002);\n        coin::take(&mut pool.balance, amount, ctx)\n    }\n\n    public fun repay<T>(\n        pool: &mut Pool<T>,\n        coin: coin::Coin<T>,\n        loan_amount: u64,\n        ctx: &mut tx_context::TxContext\n    ) {\n        let repay_amount = coin::value(&coin);\n        assert!(repay_amount >= loan_amount, 10000000001);\n        coin::put(&mut pool.balance, coin);\n        let event = FlashLoanEvent<T> {\n            loan_amount,\n            repay_amount,\n        };\n        event::emit(event);\n    }\n}"
}