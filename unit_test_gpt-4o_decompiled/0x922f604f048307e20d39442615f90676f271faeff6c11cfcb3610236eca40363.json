{
    "example": "// Decompiled by MAD\nmodule 0x922f604f048307e20d39442615f90676f271faeff6c11cfcb3610236eca40363::example {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use sui::balance;\n    use sui::sui;\n    use sui::transfer;\n    use sui::tx_context;\n    use sui::coin;\n\n    // ----- Structs -----\n\n    struct Object has store, key {\n        id: object::UID,\n        scarcity: u8,\n        style: u8,\n    }\n\n    struct SwapRequest has key {\n        id: object::UID,\n        owner: address,\n        object: Object,\n        fee: balance::Balance<sui::SUI>,\n    }\n\n    // ----- Functions -----\n\n    public fun new(\n        scarcity: u8,\n        style: u8,\n        ctx: &mut tx_context::TxContext\n    ): Object {\n        Object {\n            id: object::new(ctx),\n            scarcity,\n            style,\n        }\n    }\n\n    public fun request_swap(\n        object: Object,\n        sui_coin: coin::Coin<sui::SUI>,\n        recipient: address,\n        ctx: &mut tx_context::TxContext\n    ) {\n        assert!(coin::value(&sui_coin) >= 1000, 0);\n        let swap_request = SwapRequest {\n            id: object::new(ctx),\n            owner: tx_context::sender(ctx),\n            object,\n            fee: coin::into_balance(sui_coin),\n        };\n        transfer::transfer(swap_request, recipient);\n    }\n\n    public fun execute_swap(\n        swap_request_1: SwapRequest,\n        swap_request_2: SwapRequest\n    ): balance::Balance<sui::SUI> {\n        let SwapRequest {\n            id: id1,\n            owner: owner1,\n            object: object1,\n            fee: fee1,\n        } = swap_request_1;\n\n        let SwapRequest {\n            id: id2,\n            owner: owner2,\n            object: object2,\n            fee: fee2,\n        } = swap_request_2;\n\n        assert!(object1.scarcity == object2.scarcity, 1);\n        assert!(object1.style != object2.style, 1);\n\n        transfer::transfer(object1, owner2);\n        transfer::transfer(object2, owner1);\n\n        object::delete(id1);\n        object::delete(id2);\n\n        balance::join(&mut fee1, fee2);\n\n        fee1\n    }\n}"
}