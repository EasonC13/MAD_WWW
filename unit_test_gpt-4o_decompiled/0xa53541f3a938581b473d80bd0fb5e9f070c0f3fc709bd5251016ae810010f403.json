{
    "example": "// Decompiled by MAD\nmodule 0xa53541f3a938581b473d80bd0fb5e9f070c0f3fc709bd5251016ae810010f403::example {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use sui::balance;\n    use sui::sui;\n    use std::option;\n    use sui::math;\n    use sui::tx_context;\n    use sui::transfer;\n    use sui::coin;\n    use sui::event;\n\n    // ----- Structs -----\n\n    struct Admin has store, key {\n        id: object::UID,\n        game_id: object::ID,\n        boars_created: u64,\n        potions_created: u64,\n    }\n\n    struct Boar has store, key {\n        id: object::UID,\n        game_id: object::ID,\n        health: u64,\n        strength: u64,\n    }\n\n    struct BoarSlainEvent has copy, drop {\n        slayer_address: address,\n        boar: object::ID,\n        hero: object::ID,\n        game_id: object::ID,\n    }\n\n    struct Game has key {\n        id: object::UID,\n        payments: balance::Balance<sui::SUI>,\n    }\n\n    struct Hero has store, key {\n        id: object::UID,\n        game_id: object::ID,\n        health: u64,\n        experience: u64,\n        sword: option::Option<Sword>,\n    }\n\n    struct Potion has store, key {\n        id: object::UID,\n        game_id: object::ID,\n        potency: u64,\n    }\n\n    struct Sword has store, key {\n        id: object::UID,\n        game_id: object::ID,\n        magic: u64,\n        strength: u64,\n    }\n\n    // ----- Functions -----\n\n    fun level_up_sword(sword: &mut Sword, increment: u64) {\n        sword.strength = sword.strength + increment;\n    }\n\n    public fun equip(\n        hero: &mut Hero,\n        sword: Sword\n    ) {\n        assert!(option::is_none(&hero.sword), 6);\n        option::fill(&mut hero.sword, sword);\n    }\n\n    public fun heal(\n        hero: &mut Hero,\n        potion: Potion\n    ) {\n        let Potion {\n            id,\n            game_id,\n            potency,\n        } = potion;\n\n        object::delete(id);\n\n        assert!(hero.game_id == game_id, 0);\n\n        hero.health = math::min(hero.health + potency, 1000);\n    }\n\n    public fun hero_strength(hero: &Hero): u64 {\n        assert!(hero.health > 0, 2);\n        let sword_strength_value = if (option::is_some(&hero.sword)) {\n            sword_strength(option::borrow(&hero.sword))\n        } else {\n            0\n        };\n        (hero.experience * hero.health) + sword_strength_value\n    }\n\n    public fun new_boar(\n        admin: &mut Admin,\n        health: u64,\n        strength: u64,\n        ctx: &mut tx_context::TxContext\n    ): Boar {\n        admin.boars_created = admin.boars_created + 1;\n        Boar {\n            id: object::new(ctx),\n            game_id: admin.game_id,\n            health,\n            strength,\n        }\n    }\n\n    public fun new_game(ctx: &mut tx_context::TxContext): Admin {\n        let game = Game {\n            id: object::new(ctx),\n            payments: balance::zero<sui::SUI>(),\n        };\n        let admin = Admin {\n            id: object::new(ctx),\n            game_id: object::id(&game),\n            boars_created: 0,\n            potions_created: 0,\n        };\n        transfer::share_object(game);\n        admin\n    }\n\n    public fun new_hero(\n        sword: Sword,\n        ctx: &mut tx_context::TxContext\n    ): Hero {\n        Hero {\n            id: object::new(ctx),\n            game_id: sword.game_id,\n            health: 100,\n            experience: 0,\n            sword: option::some(sword),\n        }\n    }\n\n    public fun new_potion(\n        admin: &mut Admin,\n        potency: u64,\n        ctx: &mut tx_context::TxContext\n    ): Potion {\n        admin.potions_created = admin.potions_created + 1;\n        Potion {\n            id: object::new(ctx),\n            game_id: admin.game_id,\n            potency\n        }\n    }\n\n    public fun new_sword(\n        game: &mut Game,\n        payment: coin::Coin<sui::SUI>,\n        ctx: &mut tx_context::TxContext\n    ): Sword {\n        let payment_value = coin::value(&payment);\n        assert!(payment_value >= 100, 5);\n        coin::put(&mut game.payments, payment);\n        Sword {\n            id: object::new(ctx),\n            game_id: object::id(game),\n            magic: math::min((payment_value - 100) / 100, 10),\n            strength: 1,\n        }\n    }\n\n    public fun slay(\n        hero: &mut Hero,\n        boar: Boar,\n        ctx: &tx_context::TxContext\n    ) {\n        assert!(hero.game_id == boar.game_id, 0);\n\n        let Boar {\n            id,\n            game_id: _,\n            health,\n            strength,\n        } = boar;\n\n        let boar_health = health;\n        let boar_id = id;\n\n        loop {\n            let hero_strength = hero_strength(hero);\n            if (boar_health < hero_strength) {\n                break\n            };\n            boar_health = boar_health - hero_strength;\n            assert!(hero.health >= strength, 1);\n            hero.health = hero.health - strength;\n        };\n\n        hero.experience = hero.experience + health;\n\n        if (option::is_some(&hero.sword)) {\n            level_up_sword(option::borrow_mut(&mut hero.sword), 1);\n        };\n\n        let boar_slain_event = BoarSlainEvent {\n            slayer_address: tx_context::sender(ctx),\n            boar: object::uid_to_inner(&boar_id),\n            hero: object::id(hero),\n            game_id: hero.game_id,\n        };\n\n        event::emit(boar_slain_event);\n        object::delete(boar_id);\n    }\n\n    public fun sword_strength(sword: &Sword): u64 {\n        (sword.magic + sword.strength)\n    }\n\n    public fun take_payment(\n        admin: &Admin,\n        game: &mut Game,\n        ctx: &mut tx_context::TxContext\n    ): coin::Coin<sui::SUI> {\n        assert!(admin.game_id == object::id(game), 3);\n        coin::from_balance(\n            balance::withdraw_all(&mut game.payments),\n            ctx\n        )\n    }\n\n    public fun unequip(hero: &mut Hero): Sword {\n        assert!(option::is_some(&hero.sword), 7);\n        option::extract(&mut hero.sword)\n    }\n}"
}