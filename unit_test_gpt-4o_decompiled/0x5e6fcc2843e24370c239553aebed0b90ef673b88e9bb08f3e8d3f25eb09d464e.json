{
    "example": "// Decompiled by MAD\nmodule 0x5e6fcc2843e24370c239553aebed0b90ef673b88e9bb08f3e8d3f25eb09d464e::example {\n\n    // ----- Use Statements -----\n\n    use sui::object;\n    use sui::balance;\n    use sui::coin;\n    use sui::tx_context;\n    use sui::transfer;\n\n    // ----- Structs -----\n\n    struct AdminCap has store, key {\n        id: object::UID,\n        flash_lender_id: object::ID,\n    }\n\n    struct FlashLender<phantom T0> has key {\n        id: object::UID,\n        to_lend: balance::Balance<T0>,\n        fee: u64,\n    }\n\n    struct Receipt<phantom T0> {\n        flash_lender_id: object::ID,\n        repay_amount: u64,\n    }\n\n    // ----- Functions -----\n\n    public fun new<T>(\n        balance: balance::Balance<T>,\n        fee: u64,\n        ctx: &mut tx_context::TxContext\n    ): AdminCap {\n        let lender_id = object::new(ctx);\n        let flash_lender = FlashLender<T> {\n            id: lender_id,\n            to_lend: balance,\n            fee,\n        };\n        transfer::share_object(flash_lender);\n        AdminCap {\n            id: object::new(ctx),\n            flash_lender_id: object::uid_to_inner(&lender_id),\n        }\n    }\n\n    public fun loan<T>(\n        flash_lender: &mut FlashLender<T>,\n        amount: u64,\n        ctx: &mut tx_context::TxContext\n    ): (coin::Coin<T>, Receipt<T>) {\n        assert!(balance::value(&flash_lender.to_lend) >= amount, 0);\n        let receipt = Receipt<T> {\n            flash_lender_id: object::id(flash_lender),\n            repay_amount: amount + flash_lender.fee,\n        };\n        (\n            coin::take(&mut flash_lender.to_lend, amount, ctx),\n            receipt\n        )\n    }\n\n    public fun repay<T>(\n        flash_lender: &mut FlashLender<T>,\n        coin: coin::Coin<T>,\n        receipt: Receipt<T>\n    ) {\n        let Receipt {\n            flash_lender_id,\n            repay_amount,\n        } = receipt;\n\n        assert!(\n            object::id(flash_lender) == flash_lender_id,\n            2\n        );\n        assert!(\n            coin::value(&coin) == repay_amount,\n            1\n        );\n\n        coin::put(&mut flash_lender.to_lend, coin);\n    }\n\n    public fun fee<T>(lender: &FlashLender<T>): u64 {\n        lender.fee\n    }\n\n    public fun max_loan<T>(\n        lender: &FlashLender<T>\n    ): u64 {\n        balance::value(&lender.to_lend)\n    }\n\n    public fun repay_amount<T>(receipt: &Receipt<T>): u64 {\n        receipt.repay_amount\n    }\n\n    public fun flash_lender_id<T>(receipt: &Receipt<T>): object::ID {\n        receipt.flash_lender_id\n    }\n\n    public fun withdraw<T>(\n        flash_lender: &mut FlashLender<T>,\n        admin_cap: &AdminCap,\n        amount: u64,\n        ctx: &mut tx_context::TxContext\n    ): coin::Coin<T> {\n        assert!(\n            object::borrow_id(flash_lender) == &admin_cap.flash_lender_id,\n            3\n        );\n        assert!(\n            balance::value(&flash_lender.to_lend) >= amount,\n            4\n        );\n        coin::take(&mut flash_lender.to_lend, amount, ctx)\n    }\n\n    public fun deposit<T>(\n        flash_lender: &mut FlashLender<T>,\n        admin_cap: &AdminCap,\n        coin: coin::Coin<T>\n    ) {\n        assert!(\n            object::borrow_id(flash_lender) == &admin_cap.flash_lender_id,\n            3\n        );\n        coin::put(&mut flash_lender.to_lend, coin);\n    }\n\n    public fun update_fee<T>(\n        flash_lender: &mut FlashLender<T>,\n        admin_cap: &AdminCap,\n        new_fee: u64\n    ) {\n        assert!(\n            object::borrow_id(flash_lender) == &admin_cap.flash_lender_id,\n            3\n        );\n        flash_lender.fee = new_fee;\n    }\n}"
}